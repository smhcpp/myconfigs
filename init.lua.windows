--------------------------------
--------------Options-----------
--------------------------------

vim.g.mapleader = " "
vim.g.maplocalleader = " "
vim.opt.termguicolors = true -- Enable true color support
vim.opt.number = true -- Show line numbers
vim.opt.relativenumber = true -- Show relative line numbers
vim.opt.scrolloff = 10 -- Keep 10 lines when scrolling
vim.opt.shiftwidth = 2 -- Shift 2 spaces when indenting
vim.opt.tabstop = 2 -- 1 tab = 2 spaces
vim.opt.softtabstop = 2 -- Number of spaces per tab in insert mode
vim.opt.expandtab = true -- Use spaces instead of tabs
vim.opt.smartindent = true
vim.opt.incsearch = true -- Show matches while typing
vim.opt.ignorecase = true -- Case-insensitive searching
vim.opt.hlsearch = false -- Disable search highlighting
vim.opt.wrap = false
vim.opt.cursorline = true
vim.opt.showmode = false
vim.opt.laststatus = 3
vim.opt.signcolumn = 'yes'
vim.o.showtabline = 2

--------------------------------
----------Loading Lazy----------
--------------------------------

-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

-- Setup lazy.nvim
require("lazy").setup({
  spec = {
    {
      -- *** CHANGED THEME ***
      "folke/tokyonight.nvim",
      lazy = false,
      priority = 1000,
      config = function()
        -- Load the colorscheme here
        vim.o.background = "dark"
        vim.cmd.colorscheme("tokyonight")
      end,
    },
    {
      "akinsho/toggleterm.nvim", -- Better terminal
      config = function()
        require("toggleterm").setup()
        vim.keymap.set("n", "<leader>,", "<cmd>ToggleTerm<CR>", { desc = "Toggle terminal" })
      end
    },
    {
      'lervag/vimtex',
      ft = 'tex', -- Only load for LaTeX files
      config = function()
        vim.g.vimtex_view_method = 'zathura' -- PDF viewer (change to 'skim' on macOS)
        vim.g.vimtex_compiler_method = 'latexmk' -- Default compiler
        vim.g.vimtex_syntax_enabled = 1 -- Enhanced syntax highlighting
        vim.g.vimtex_view_forward_search_on_start = 1 -- Auto-open PDF
        vim.g.vimtex_view_automatic = 1
      end
    },
    {
      "lewis6991/gitsigns.nvim",
      event = "BufReadPre",
      config = function()
        require('gitsigns').setup({
          on_attach = function(bufnr)
            local gs = package.loaded.gitsigns
            local function map(mode, l, r, opts)
              opts = opts or {}
              opts.buffer = bufnr
              vim.keymap.set(mode, l, r, opts)
            end
            -- Navigation
            map('n', ']c', function()
              if vim.wo.diff then return ']c' end
              vim.schedule(function() gs.next_hunk() end)
              return '<Ignore>'
            end, { expr = true, desc = "Next Git hunk" })
            map('n', '[c', function()
              if vim.wo.diff then return '[c' end
              vim.schedule(function() gs.prev_hunk() end)
              return '<Ignore>'
            end, { expr = true, desc = "Previous Git hunk" })
            -- Actions
            map('n', '<leader>hs', gs.stage_hunk, { desc = "Stage hunk" })
            map('n', '<leader>hr', gs.reset_hunk, { desc = "Reset hunk" })
            map('v', '<leader>hs', function() gs.stage_hunk { vim.fn.line("."), vim.fn.line("v") } end, { desc = "Stage selection" })
            map('v', '<leader>hr', function() gs.reset_hunk { vim.fn.line("."), vim.fn.line("v") } end, { desc = "Reset selection" })
            map('n', '<leader>hu', gs.undo_stage_hunk, { desc = "Undo stage hunk" })
            map('n', '<leader>hp', gs.preview_hunk, { desc = "Preview hunk" })
            map('n', '<leader>hb', gs.blame_line, { desc = "Blame line" })
          end,
          -- Gutter signs configuration
          signs = {
            add = { text = '│' },
            change = { text = '│' },
            delete = { text = '_' },
            topdelete = { text = '‾' },
            changedelete = { text = '~' },
            untracked = { text = '┆' },
          },
        })
      end,
    },
    {
      'kdheepak/lazygit.nvim',
      cmd = { "LazyGit", "LazyGitConfig", "LazyGitCurrentFile" },
      dependencies = {
        'nvim-lua/plenary.nvim',
      },
    },
    {
      "tpope/vim-fugitive",
      cmd = { "Git", "Gdiffsplit", "Gclog" },
    },
    {
      "sindrets/diffview.nvim",
      dependencies = "nvim-lua/plenary.nvim",
      cmd = { "DiffviewOpen", "DiffviewClose" },
    },
    {
      "nvim-treesitter/nvim-treesitter",
      build = ":TSUpdate",
      opts = {
        ensure_installed = { "lua", "python", "zig", "c", "bash" },
        highlight = { enable = true },
        indent = { enable = true },
      },
    },
    {
      "hrsh7th/cmp-nvim-lsp"
    },
    {
      "hrsh7th/nvim-cmp",
      dependencies = {
        "hrsh7th/cmp-nvim-lsp",
        "hrsh7th/cmp-buffer",
        "hrsh7th/cmp-path",
        "hrsh7th/cmp-cmdline",
      },
    },
    {
      "williamboman/mason.nvim",
      config = true
    },
    {
      "nvim-neo-tree/neo-tree.nvim",
      branch = "v3.x",
      dependencies = {
        "nvim-lua/plenary.nvim",
        "nvim-tree/nvim-web-devicons",
        "MunifTanjim/nui.nvim",
      }
    },
    {
      'nvim-lualine/lualine.nvim',
      dependencies = { 'nvim-tree/nvim-web-devicons' },
      config = function()
        require('lualine').setup({
          options = {
            -- *** ADDED THIS LINE FOR THEME ***
            theme = 'tokyonight'
          }
        })
      end
    },
    {
      -- *** UPDATED TELESCOPE SECTION ***
      "nvim-telescope/telescope.nvim",
      branch = "0.1.x",
      dependencies = {
        "nvim-lua/plenary.nvim",
        -- *** REMOVED fzf-native PLUGIN ***
        "nvim-tree/nvim-web-devicons",
      },
      config = function()
        local telescope = require("telescope")
        local actions = require("telescope.actions")

        telescope.setup({
          defaults = {
            path_display = { "smart" },
            mappings = {
              i = {
                ["<C-k>"] = actions.move_selection_previous, -- move to prev result
                ["<C-j>"] = actions.move_selection_next, -- move to next result
                ["<C-q>"] = actions.send_selected_to_qflist + actions.open_qflist,
              },
            },
          },
        })

        -- *** REMOVED fzf extension LOAD ***

        -- set keymaps
        local keymap = vim.keymap -- for conciseness

        keymap.set("n", "<leader>ff", "<cmd>Telescope find_files<cr>", { desc = "Fuzzy find files in cwd" })
        keymap.set("n", "<leader>fo", "<cmd>Telescope oldfiles<cr>", { desc = "Fuzzy find recent files" })
        keymap.set("n", "<leader>fs", "<cmd>Telescope live_grep<cr>", { desc = "Find string in cwd" })
        keymap.set("n", "<leader>fg", "<cmd>Telescope grep_string<cr>", { desc = "Find string under cursor in cwd" })
      end,
    },
    {
      "windwp/nvim-autopairs",
      event = { "InsertEnter" },
      dependencies = {
        "hrsh7th/nvim-cmp",
      },
      config = function()
        local autopairs = require("nvim-autopairs")
        autopairs.setup({
          check_ts = true,
          ts_config = {
            lua = { "string" },
            javascript = { "template_string" },
            java = false,
          },
        })
        local cmp_autopairs = require("nvim-autopairs.completion.cmp")
        local cmp = require("cmp")
        cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())
      end,
    },
    {
      'folke/persistence.nvim',
      event = "BufReadPre", -- Load before files are read
      config = function()
        require('persistence').setup({
          dir = vim.fn.stdpath('data') .. '/sessions/', -- Where to save sessions
          options = { 'buffers', 'curdir', 'tabpages', 'winsize' }, -- What to save
          autosave = true, -- Automatically save on exit
          autoload = true, -- Automatically load on startup
        })
      end,
    },
    {
      'numToStr/Comment.nvim',
      opts = {
        toggler = {
          line = '<leader>/',
        },
        opleader = {
          line = '<leader>/',
        },
        mappings = {
          basic = true,
          extra = false
        }
      },
      keys = {
        { "<leader>/", desc = "Toggle comment" },
        { "<leader>/", mode = "v", desc = "Toggle comment" },
      }
    },
  },
})

--------------------------------
---------Loading Plugins--------
--------------------------------

require("neo-tree").setup({
  filesystem = {
    filtered_items = {
      hide_dotfiles = false,
      hide_gitignored = false,
      hide_hidden = false,
      visible = true,
      never_show = {
        ".git",
        ".DS_Store",
        "thumbs.db"
      }
    },
    follow_current_file = {
      enabled = true,
    },
    window = {
      width = 30,
      max_width = 35,
      min_width = 25,
      auto_expand_width = false,
      mappings = {
        ["<cr>"] = "open",
        ["l"] = "open",
        ["c"] = "close_node",
        ["h"] = "navigate_up",
      },
    },
  },
})

-- Lualine is now configured inside its lazy.nvim spec


-- ========== LSP CONFIG ==========
local cmp_lsp = require('cmp_nvim_lsp')

local capabilities = vim.tbl_deep_extend(
  'force',
  vim.lsp.protocol.make_client_capabilities(),
  cmp_lsp.default_capabilities()
)

local function on_attach(_, bufnr)
  local opts = { buffer = bufnr, silent = true }
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
end

vim.lsp.config('lua_ls', {
  on_attach = on_attach,
  capabilities = capabilities,
  settings = {
    Lua = { diagnostics = { globals = { 'vim' } } },
  },
})

vim.lsp.config('texlab', { on_attach = on_attach, capabilities = capabilities })
vim.lsp.config('zls', { on_attach = on_attach, capabilities = capabilities })

vim.lsp.enable({ 'lua_ls', 'texlab', 'zls' })

-- Diagnostics
vim.diagnostic.config({
  virtual_text = true,
  underline = true,
  update_in_insert = false,
  severity_sort = true,
})
local cmp = require('cmp')

cmp.setup({
  mapping = cmp.mapping.preset.insert({
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
    ['<Tab>'] = cmp.mapping.select_next_item(),
    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'buffer' },
    { name = 'path' },
  }),
})

--------------------------------
----------Mapping Keys----------
--------------------------------

-- General file operations
vim.keymap.set("n", "<leader>e", ":Neotree toggle C:/Users/judimer/Documents/prog<CR>", { noremap = true, silent = true, desc = "Toggle prog folder" })
vim.keymap.set("n", "<leader>w", function()
  vim.lsp.buf.format({ async = false }) -- run formatter first
  vim.cmd("w") -- then save
end, { noremap = true, silent = true, desc = "Format and save" })
vim.keymap.set("n", "<leader>q", ":q!<CR>", { noremap = true, silent = true })
vim.keymap.set("i", "jk", "<Esc>", { noremap = true, silent = true })
vim.keymap.set("t", "<Esc>", "<C-\\><C-n>", { noremap = true, silent = true })
vim.keymap.set("t", "jk", "<C-\\><C-n>", { noremap = true, silent = true })

-- Buffer management
vim.keymap.set("n", "<leader>bn", ":bnext<CR>", { noremap = true, silent = true })
vim.keymap.set("n", "<leader>bp", ":bprevious<CR>", { noremap = true, silent = true })
vim.keymap.set("n", "<leader>bf", ":bfirst<CR>", { noremap = true, silent = true })
vim.keymap.set("n", "<leader>bl", ":blast<CR>", { noremap = true, silent = true })

-- Clipboard operations (unified style)
vim.keymap.set({ "n", "v" }, "<Leader>y", '"+y', { noremap = true, silent = true })
vim.keymap.set("n", "<Leader>p", '"+p', { noremap = true, silent = true })

-- Line movement (improved with descriptions)
vim.keymap.set('n', 'K', ':m .-2<CR>==', { noremap = true, silent = true, desc = "Move line up" })
vim.keymap.set('n', 'J', ':m .+1<CR>==', { noremap = true, silent = true, desc = "Move line down" })
vim.keymap.set('v', 'J', ":m '>+1<CR>gv=gv", { noremap = true, silent = true, desc = "Move selection down" })
vim.keymap.set('v', 'K', ":m '<-2<CR>gv=gv", { noremap = true, silent = true, desc = "Move selection up" })

-- Tab movements
vim.keymap.set("n", "<leader>to", "<cmd>tabnew<CR>", { noremap = true, silent = true, desc = "Open new tab" })
vim.keymap.set("n", "<leader>tq", "<cmd>tabclose<CR>", { noremap = true, silent = true, desc = "Close current tab" })
vim.keymap.set("n", "<leader>tk", "<cmd>tabn<CR>", { noremap = true, silent = true, desc = "Go to next tab" })
vim.keymap.set("n", "<leader>tj", "<cmd>tabp<CR>", { noremap = true, silent = true, desc = "Go to previous tab" })

-- Vimtex keys
vim.keymap.set('n', '<leader>vc', '<cmd>VimtexCompile<CR>', { desc = "LaTeX Compile" })
vim.keymap.set('n', '<leader>vv', '<cmd>VimtexView<CR>', { desc = "View PDF" })
vim.keymap.set('n', '<leader>vt', '<cmd>VimtexTocToggle<CR>', { desc = "Toggle TOC" })

-- Split operations
vim.keymap.set("n", "<leader>zv", "<C-w>v", { desc = "Split window vertically" })
vim.keymap.set("n", "<leader>zh", "<C-w>s", { desc = "Split window horizontally" })
vim.keymap.set("n", "<leader>ze", "<C-w>=", { desc = "Make splits equal size" })
vim.keymap.set("n", "<leader>zx", "<cmd>close<CR>", { desc = "Close current split" })
vim.keymap.set("n", "<leader>zz", "<C-w>w", { desc = "Cycle through open splits" })

-- Key mappings
vim.keymap.set("n", "<leader>gg", "<cmd>LazyGit<CR>", { desc = "Open LazyGit" })
vim.keymap.set("n", "<leader>gs", "<cmd>Git<CR>", { desc = "Git status" })
vim.keymap.set("n", "<leader>gd", "<cmd>Gdiffsplit<CR>", { desc = "Git diff" })
vim.keymap.set("n", "<leader>gb", "<cmd>Git blame<CR>", { desc = "Git blame" })
vim.keymap.set("n", "<leader>gl", "<cmd>Gclog<CR>", { desc = "Git log" })
vim.keymap.set("n", "<leader>gp", "<cmd>Git push<CR>", { desc = "Git push" })

-- Diffview commands
vim.keymap.set("n", "<leader>gv", "<cmd>DiffviewOpen<CR>", { desc = "View diffs" })
vim.keymap.set("n", "<leader>gq", "<cmd>DiffviewClose<CR>", { desc = "Close diff view" })

vim.keymap.set("n", "<leader>tt", function()
  if vim.o.showtabline == 2 then
    vim.o.showtabline = 0
  else
    vim.o.showtabline = 2
  end
end, { silent = true, noremap = true, desc = "Toggle Tab Bar" })

-- Enter Functionality
vim.keymap.set('n', '<CR>', 'i<CR><Esc>', { noremap = true, desc = "Insert new line and return to normal mode" })
